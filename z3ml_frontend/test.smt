(declare-datatype Type ((*2 (*2.1 Type) (*2.2 Type)) (*3 (*3.1 Type) (*3.2 Type) (*3.3 Type)) (*4 (*4.1 Type) (*4.2 Type) (*4.3 Type) (*4.4 Type)) (*5 (*5.1 Type) (*5.2 Type) (*5.3 Type) (*5.4 Type) (*5.5 Type)) (-> (->.1 Type) (->.2 Type)) (int) (list (list.1 Type))))
(declare-const T10 Bool)(assert-soft T10 :weight 11)
(declare-const T9 Bool)(assert-soft T9 :weight 10)
(declare-const T4 Bool)(assert-soft T4 :weight 6)
(declare-const T1 Bool)(assert-soft T1 :weight 3)
(declare-const T0 Bool)(assert-soft T0 :weight 1)
(declare-const T2 Bool)(assert-soft T2 :weight 1)
(declare-const T3 Bool)(assert-soft T3 :weight 1)
(declare-const T5 Bool)(assert-soft T5 :weight 1)
(declare-const T6 Bool)(assert-soft T6 :weight 1)
(declare-const T7 Bool)(assert-soft T7 :weight 1)
(declare-const T8 Bool)(assert-soft T8 :weight 1)
(declare-const -a61 Type)
(declare-const -b61 Type)
(declare-const -c61 Type)
(declare-const -d61 Type)
(declare-const -e61 Type)
(declare-const -f61 Type)
(declare-const -g61 Type)
(declare-const -h61 Type)
(declare-const -i61 Type)
(declare-const -j61 Type)
(declare-const -r60 Type)
(declare-const -s60 Type)
(declare-const -t60 Type)
(declare-const -u60 Type)
(declare-const -v60 Type)
(declare-const -w60 Type)
(declare-const -x60 Type)
(declare-const -y60 Type)
(define-fun sum.2548 ((-q60 Type) (-p60 Type) (-o60 Type) (-n60 Type) (-m60 Type) (-l60 Type) (-k60 Type) (-j60 Type) (-i60 Type) (-h60 Type) (-g60 Type) (-f60 Type) (-d60 Type) (-c60 Type) (-b60 Type) (-y59 Type) (-x59 Type) (-w59 Type))
                     Bool
  (=> T10 (and (= -w59 -x59) 
    (=> T9 (and (= -x59 (-> -q60 -p60))
                (= -y59 -q60)
                (= -c60 -p60)
                (= -d60 -q60)
                (= -i60 -p60)
      (=> T4 (and (= -j60 (-> -m60 -i60))
                  (= -k60 (-> -l60 -j60))
        (=> T1 (and (= -n60 (-> -o60 -m60))
          (=> T0 (= -o60 -g60))
          (=> T2 (= -n60 -w59))))
        (=> T3 (= -k60 (-> int (-> int int))))
        (=> T5 (= -l60 -f60))))
      (=> T6 (and (= -d60 (list -h60))
                  (= -h60 -f60)
                  (= (list -h60) -g60)))
      (=> T7 (= int -c60))
      (=> T8 (= -y59 (list -b60))))))))
(assert (=> T10 (and (sum.2548 -r60 -s60 -t60 -u60 -v60 -w60 -x60 -y60 -a61 -b61 -c61 -d61 -e61 -f61 -g61 -h61 -i61 -j61)
          (=> T9 (and
            (=> T4 (and
              (=> T1 (and true true))
              true
              true))
            true true true)))))
(check-sat)(get-objectives)(get-value (T10 T9 T4 T1 T0 T2 T3 T5 T6 T7 T8))
